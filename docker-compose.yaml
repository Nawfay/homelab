version: "3"

services:
  jellyfin:
    image: lscr.io/linuxserver/jellyfin
    container_name: jellyfin
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - VERSION=docker
    volumes:
      - ${MEDIA_DIRECTORY}/movies:/data/movies
      - ${MEDIA_DIRECTORY}/tvshows:/data/tvshows
      - ${MEDIA_DIRECTORY}/anime_tvshows:/data/anime_tvshows
      - ${MEDIA_DIRECTORY}/anime_movies:/data/anime_movies
      - ${INSTALL_DIRECTORY}/config/jellyfin:/config
    ports: # plex
      - 8096:8096 # plex
    restart: unless-stopped

  # plex is used to serve your media to the client devices
  # plex:
  #   image: lscr.io/linuxserver/plex:latest
  #   container_name: plex
  #   network_mode: host
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - VERSION=docker
  #   volumes:
  #     - ${MEDIA_DIRECTORY}/tvshows:/tv
  #     - ${MEDIA_DIRECTORY}/movies:/movies
  #     - ${MEDIA_DIRECTORY}/anime_tvshows:/anime_tvshows
  #     - ${MEDIA_DIRECTORY}/anime_movies:/data/anime_movies
  #     - ${INSTALL_DIRECTORY}/config/plex/:/config
  #   restart: unless-stopped

  # qBitorrent is used to download torrents
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:4.6.0
    container_name: qbittorrent
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - WEBUI_PORT=8080
    volumes:
      - ${MEDIA_DIRECTORY}/downloads:/downloads
      - ${INSTALL_DIRECTORY}/config/qbittorrent:/config
    restart: unless-stopped
    ports: # qbittorrent
      - 8080:8080 # qbittorrent
    #network_mode: "service:gluetun"

  # Sonarr is used to query, add downloads to the download queue and index TV shows
  # https://sonarr.tv/
  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ${MEDIA_DIRECTORY}/tvshows:/tv
      - ${MEDIA_DIRECTORY}/anime_tvshows:/anime_tvshows
      - ${MEDIA_DIRECTORY}/downloads:/downloads
      - ${INSTALL_DIRECTORY}/config/sonarr:/config
    ports:
      - 8989:8989
    restart: unless-stopped

  # Radarr is used to query, add downloads to the download queue and index Movies
  # https://radarr.video/
  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ${MEDIA_DIRECTORY}/movies:/movies
      - ${MEDIA_DIRECTORY}/anime_movies:/anime_movies
      - ${MEDIA_DIRECTORY}/downloads:/downloads
      - ${INSTALL_DIRECTORY}/config/radarr:/config
    ports:
      - 7878:7878
    restart: unless-stopped

  # Prowlarr is our torrent indexer/searcher. Sonarr/Radarr use Prowlarr as a source
  # https://prowlarr.com/
  prowlarr:
    image: lscr.io/linuxserver/prowlarr
    container_name: prowlarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ${INSTALL_DIRECTORY}/config/prowlarr:/config
    ports:
      - 9696:9696
    restart: unless-stopped

  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
      - LOG_LEVEL=debug
      - PUID=${PUID}
      - PGID=${PGID}
    ports:
      - 5055:5055
    volumes:
      - ${INSTALL_DIRECTORY}/config/jellyseerr:/app/config
    restart: unless-stopped

  # Portainer helps debugging and monitors the containers
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    ports:
      - 9000:9000
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${INSTALL_DIRECTORY}/config/portainer:/data
    restart: unless-stopped

  # Watchtower is going to keep our instances updated
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    environment:
      - WATCHTOWER_CLEANUP=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
  
  flaresolverr:
    # DockerHub mirror flaresolverr/flaresolverr:latest
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=info
      - LOG_HTML=false
      - CAPTCHA_SOLVER=none
      - TZ=Europe/London
    ports:
      - "8191:8191"
    restart: unless-stopped

  homarr:
    container_name: homarr
    image: ghcr.io/ajnart/homarr:latest
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Optional, only if you want docker integration
      - ${INSTALL_DIRECTORY}/homarr:/app/data/configs
      - ${INSTALL_DIRECTORY}/homarr:/app/public/icons
      - ${INSTALL_DIRECTORY}/homarr:/data
    ports:
      - '7575:7575'

  # jellyplex-watched:
  #   image: luigi311/jellyplex-watched:latest
  #   container_name: jellyplex-watched
  #   restart: always
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - DRYRUN=True
  #     - DEBUG=True
  #     - DEBUG_LEVEL=info
  #     - RUN_ONLY_ONCE=False
  #     - SLEEP_DURATION=600
  #     - LOGFILE=/tmp/log.log
  #     - MARKFILE=/tmp/mark.log
  #     - USER_MAPPING={"Dishit79":"Ayham"}
  #     - LIBRARY_MAPPING={"TV Shows":"Shows"}
  #     - BLACKLIST_LIBRARY=
  #     - WHITELIST_LIBRARY=
  #     - BLACKLIST_LIBRARY_TYPE=
  #     - WHITELIST_LIBRARY_TYPE=
  #     - BLACKLIST_USERS=
  #     - WHITELIST_USERS=
  #     - PLEX_BASEURL=http://10.0.0.204:32400
  #     - PLEX_TOKEN=aVaCFv3CPhMMN6XWyNTx
  #     - JELLYFIN_BASEURL=http://10.0.0.204:8096
  #     - JELLYFIN_TOKEN=1f3318787e34438d8d643f2fe87bf69a
  #     - SSL_BYPASS=True
  #     - SYNC_FROM_PLEX_TO_JELLYFIN=True
  #     - SYNC_FROM_JELLYFIN_TO_PLEX=True
    # volumes:
    #   - ${INSTALL_DIRECTORY}/config/jellyplex-watched:/config

